// Mocks generated by Mockito 5.4.2 from annotations
// in bandart/test/models/thompson_sampling_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:math' as _i2;

import 'package:bandart/bandart.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRandom_0 extends _i1.SmartFake implements _i2.Random {
  _FakeRandom_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BetaModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockBetaModel extends _i1.Mock implements _i3.BetaModel {
  @override
  _i2.Random get random => (super.noSuchMethod(
        Invocation.getter(#random),
        returnValue: _FakeRandom_0(
          this,
          Invocation.getter(#random),
        ),
        returnValueForMissingStub: _FakeRandom_0(
          this,
          Invocation.getter(#random),
        ),
      ) as _i2.Random);

  @override
  set random(_i2.Random? _random) => super.noSuchMethod(
        Invocation.setter(
          #random,
          _random,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get sampleSize => (super.noSuchMethod(
        Invocation.getter(#sampleSize),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set sampleSize(int? _sampleSize) => super.noSuchMethod(
        Invocation.setter(
          #sampleSize,
          _sampleSize,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set samples(dynamic samples) => super.noSuchMethod(
        Invocation.setter(
          #samples,
          samples,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set history(_i3.DataFrame? _history) => super.noSuchMethod(
        Invocation.setter(
          #history,
          _history,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get numberOfInterventions => (super.noSuchMethod(
        Invocation.getter(#numberOfInterventions),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set numberOfInterventions(int? _numberOfInterventions) => super.noSuchMethod(
        Invocation.setter(
          #numberOfInterventions,
          _numberOfInterventions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sample([Map<dynamic, dynamic>? context]) => super.noSuchMethod(
        Invocation.method(
          #sample,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<double> getSampleProbabilities({bool? max = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSampleProbabilities,
          [],
          {#max: max},
        ),
        returnValue: <double>[],
        returnValueForMissingStub: <double>[],
      ) as List<double>);

  @override
  List<double> maxProbabilities() => (super.noSuchMethod(
        Invocation.method(
          #maxProbabilities,
          [],
        ),
        returnValue: <double>[],
        returnValueForMissingStub: <double>[],
      ) as List<double>);

  @override
  List<double> minProbabilities() => (super.noSuchMethod(
        Invocation.method(
          #minProbabilities,
          [],
        ),
        returnValue: <double>[],
        returnValueForMissingStub: <double>[],
      ) as List<double>);

  @override
  List<double> interventionMeans() => (super.noSuchMethod(
        Invocation.method(
          #interventionMeans,
          [],
        ),
        returnValue: <double>[],
        returnValueForMissingStub: <double>[],
      ) as List<double>);
}
